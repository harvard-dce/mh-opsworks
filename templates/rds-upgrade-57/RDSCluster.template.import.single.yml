AWSTemplateFormatVersion: '2010-09-09'

Description: 'Creates RDS Aurora cluster and associated resources'

Parameters:
  DBClusterIdentifier:
    Description: 'Name of the RDS cluster'
    Type: 'String'
  DBInstancePrefix:
    Description: 'Name of the RDS intance(s)'
    Type: 'String'
  ParentVpcStack:
    Description: 'VPC Cloudformation stack this RDS cluster will associated with'
    Type: 'String'
  DBMasterUser:
    Description: 'Database master user'
    Type: 'String'
  DBMasterUserPassword:
    Description: 'Database master user password'
    Type: 'String'
  PreferredBackupWindow:
    Description: 'Time window in which AWS will perform automated backups'
    Type: 'String'
  PreferredMaintenanceWindow:
    Description: 'Time window in which AWS will perform automated maintenance'
    Type: 'String'
  DBInstanceClass:
    Description: 'Instance type of database instances'
    Type: 'String'
  DBName:
    Description: 'Name of the database to create in each instance'
    Type: 'String'
  MultiAZ:
    Description: "If 'true' a 2nd replica db instance will be created"
    Type: 'String'
  EnablePerformanceInsights:
    Description: 'Turn on the extra performance insights interface'
    Type: 'String'
  SnsTopicArn:
    Description: 'ARN of the SNS topic the cluster will send events to'
    Type: 'String'
  BackupRetentionPeriod:
    Description: 'Number of days to keep automated backups'
    Type: 'String'

Conditions:
  CreateReplica: !Not [!Equals [!Ref MultiAZ, 'false']]

Resources:
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Sub '${AWS::StackName} db subnet group'
      SubnetIds:
        !Split [
          ',',
          { 'Fn::ImportValue': !Sub '${ParentVpcStack}-private-subnet-ids' },
        ]

  DBClusterParameterGroup57:
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Description: !Sub '${AWS::StackName} cluster-level settings'
      Family: 'aurora-mysql5.7'
      Parameters:
        binlog_format: 'MIXED'
        lower_case_table_names: '1'
        # this just omits some unnecessary data from the replication messages
        aurora_enable_repl_bin_log_filtering: '1'

  DBParameterGroup57:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: !Sub '${AWS::StackName} instance-level settings'
      Family: 'aurora-mysql5.7'
      Parameters:
        slow_query_log: '1'
        log_output: 'FILE'
        long_query_time: 3

  DBCluster:
    Type: 'AWS::RDS::DBCluster'
    # This attribute indicates what to do with the resource when the Cfn stack is deleted
    # default for rds clusters is "Snapshot" but that would interfere with our automated processes
    DeletionPolicy: Retain
    Properties:
      DBClusterIdentifier: !Ref DBClusterIdentifier
      BackupRetentionPeriod: !Ref BackupRetentionPeriod
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup57
      DBSubnetGroupName: !Ref DBSubnetGroup
      DeletionProtection: true
      Engine: 'aurora-mysql'
      EngineMode: provisioned
      EngineVersion: 5.7.mysql_aurora.2.11.2
      MasterUsername: !Ref DBMasterUser
      MasterUserPassword: !Ref DBMasterUserPassword
      DatabaseName: !Ref DBName
      PreferredBackupWindow: !Ref PreferredBackupWindow
      PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow
      # these settings only indicate which log types (if/when enabled)
      # we'd like to have go to cloudwatch logs
      EnableCloudwatchLogsExports:
        # these are always turned on
        - 'error'
        # these are turned off; turn on only for debugging/diagnosing
        - 'general'
          # these are turned on via the paramter group above
        - 'slowquery'
      VpcSecurityGroupIds:
        - { 'Fn::ImportValue': !Sub '${ParentVpcStack}-common-sg-id' }

  DBInstance1:
    Type: 'AWS::RDS::DBInstance'
    # See note on the cluster resource
    DeletionPolicy: Retain
    Properties:
      AutoMinorVersionUpgrade: false
      CopyTagsToSnapshot: true
      Engine: 'aurora-mysql'
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: !Join ['-', [!Ref DBInstancePrefix, '1']]
      DBInstanceClass: !Ref DBInstanceClass
      DBParameterGroupName: !Ref DBParameterGroup57
      EnablePerformanceInsights: !Ref EnablePerformanceInsights
      MonitoringInterval: 60
      MonitoringRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/rds-monitoring-role'

  DBClusterEventSubscription:
    # this adds rds events to our general feed so we can subscribe
    # to various things and take actions. For instance, in our dev account
    # there is a lambda function that watches for cases where an
    # rds cluster was started because it was hibernated for longer than
    # the 7 day max set by AWS, and then turns them off again
    Type: 'AWS::RDS::EventSubscription'
    DeletionPolicy: Retain
    Properties:
      EventCategories:
        - failover
        - failure
        - notification
      SnsTopicArn: !Ref SnsTopicArn
      SourceIds: [!Ref DBCluster]
      SourceType: 'db-cluster'
