{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "This template creates a VPC environment for AWS OpsWorks. The stack contains 2 subnets: the first subnet is public. The second subnet is private.",

  "Parameters" : {
    "CIDRBlock": {
      "Description":"The entire VPC CIDR block",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "the entire CIDR block for this VPC, e.g. 10.1.1.0/24"
    },
    "PublicCIDRBlock": {
      "Description":"The public subnet CIDR block",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "the CIDR block for the public part of this VPC, e.g. 10.1.1.0/26"
    },
    "PrivateCIDRBlock": {
      "Description":"The private subnet CIDR block",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "the CIDR block for the private part of this VPC, e.g. 10.1.1.64/26"
    },
    "DbCIDRBlock": {
      "Description":"The db subnet CIDR block",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "the CIDR block for the DB subnet in a separate AZ, e.g. 10.1.1.128/28"
    },
    "PrimaryAZ": {
      "Description":"Primary AZ",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "The AZ for all opsworks EC2 instances"
    },
    "SecondaryAZ": {
      "Description":"Secondary AZ",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "The secondary AZ for future expansion and RDS replication"
    }
  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "CIDRBlock"},
        "EnableDnsHostnames" : "true",
        "Tags" : [
          { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "PublicSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone": { "Ref": "PrimaryAZ" },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "PublicCIDRBlock" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "Public subnet" ] ] } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "GatewayToInternet" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PublicNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "public subnet network acl" ] ] } }
        ]
      }
    },

    "InboundEmphemeralPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0"
      }
    },

    "OutboundPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "PublicSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },

    "DbSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone": { "Ref": "SecondaryAZ" },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "DbCIDRBlock" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "db subnet" ] ] } }
        ]
      }
    },

    "DBSubnetGroup": {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "db subnet group" ] ] },
        "SubnetIds": [{ "Ref" : "DbSubnet" }, { "Ref" : "PrivateSubnet" }, { "Ref": "PublicSubnet" } ]
      }
    },

    "PrivateSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone": { "Ref": "PrimaryAZ" },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "PrivateCIDRBlock" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "private subnet" ] ] } }
        ]
      }
    },

    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "PrivateSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "PrivateRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn": "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : {
          "Ref" : "PrivateRouteTable"
        },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : {
          "Ref" : "NATGateway"
        }
      }
    },

    "PrivateNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Network", "Value" : "Private" },
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "private subnet network acl" ] ] } }
        ]
      }
    },

    "InboundPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "OutBoundPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "PrivateSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
      }
    },

    "NATGatewayEIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },

    "NATGateway" : {
      "Type" : "AWS::EC2::NatGateway",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "AllocationId" : {
          "Fn::GetAtt" : [
            "NATGatewayEIP",
            "AllocationId"
          ]
        },
        "SubnetId" : {
          "Ref" : "PublicSubnet"
        }
      }
    },

    "OpsworksLayerSecurityGroupAnalytics": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "GroupDescription" : "SG for the analytics layer",
            "VpcId" : { "Ref" : "VPC" },
            "SecurityGroupIngress" : [
            ],
            "SecurityGroupEgress" : [
            ],
            "Tags" : [
              { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "opsworks analytics layer security group" ] ] } }
            ]
        }
    },

    "OpsworksLayerSecurityGroupUtility": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "GroupDescription" : "SG for the utility layer",
            "VpcId" : { "Ref" : "VPC" },
            "SecurityGroupIngress" : [
              { "IpProtocol" : "tcp", "FromPort" : "3128",  "ToPort" : "3128",  "CidrIp" : "10.0.0.0/8" },
            ],
            "SecurityGroupEgress" : [
            ],
            "Tags" : [
              { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "opsworks utility layer security group" ] ] } }
            ]
        }
    },

    "OpsworksLayerSecurityGroupAdmin": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "GroupDescription" : "SG for the admin layer",
            "VpcId" : { "Ref" : "VPC" },
            "SecurityGroupIngress" : [
              <% ca_ips.each do |ip| %>
              { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "<%= ip %>" },
              { "IpProtocol" : "tcp", "FromPort" : "443",  "ToPort" : "443",  "CidrIp" : "<%= ip %>" },
              { "IpProtocol" : "tcp", "FromPort" : "8080",  "ToPort" : "8080",  "CidrIp" : "<%= ip %>" },
              <% end %>
            ],
            "SecurityGroupEgress" : [
            ],
            "Tags" : [
              { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "opsworks admin layer security group" ] ] } }
            ]
        }
    },

    "OpsworksLayerSecurityGroupEngage": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "GroupDescription" : "SG for the engage layer",
            "VpcId" : { "Ref" : "VPC" },
            "SecurityGroupIngress" : [
              { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" },
              { "IpProtocol" : "tcp", "FromPort" : "443",  "ToPort" : "443",  "CidrIp" : "0.0.0.0/0" },
            ],
            "SecurityGroupEgress" : [
            ],
            "Tags" : [
              { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "opsworks engage layer security group" ] ] } }
            ]
        }
    },

    "OpsworksLayerSecurityGroupCommon": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "GroupDescription" : "Common SG rules for all layers",
            "VpcId" : { "Ref" : "VPC" },
            "SecurityGroupIngress" : [
              { "IpProtocol" : "tcp", "FromPort" : "0",  "ToPort" : "65535",  "CidrIp" : "10.0.0.0/8" },
              { "IpProtocol" : "udp", "FromPort" : "0",  "ToPort" : "65535",  "CidrIp" : "10.0.0.0/8" },
              { "IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "CidrIp" : { "Fn::Join": [ "", [ { "Ref": "NATGatewayEIP" }, "/32" ] ] } },
              { "IpProtocol": "udp", "FromPort": "0", "ToPort": "65535", "CidrIp" : { "Fn::Join": [ "", [ { "Ref": "NATGatewayEIP" }, "/32" ] ] } },
              <% vpn_ips.each_with_index do |ip, index| %>
              { "IpProtocol" : "tcp", "FromPort" : "0",  "ToPort" : "65535",  "CidrIp" : "<%= ip %>" },
              { "IpProtocol" : "udp", "FromPort" : "0",  "ToPort" : "65535",  "CidrIp" : "<%= ip %>" },
              <% end %>
            ],
            "SecurityGroupEgress" : [
            ],
            "Tags" : [
              { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "opsworks common layer security group" ] ] } }
            ]
        }
    },

  },

  "Outputs" : {

    "VPC" : {
      "Description" : "VPC",
      "Value" : {"Ref" : "VPC"}
    },

    "PublicSubnets" : {
      "Description" : "Public Subnet",
      "Value" : {"Ref" : "PublicSubnet" }
    },

    "PrivateSubnets" : {
      "Description" : "Private Subnet",
      "Value" : {"Ref" : "PrivateSubnet" }
    }
  }
}
