{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "This template creates a VPC environment for AWS OpsWorks. The stack contains 2 subnets: the first subnet is public and contains a NAT device for internet access from the private subnet. The second subnet is private.",

  "Parameters" : {
    "CIDRBlock": {
      "Description":"The entire VPC CIDR block",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "the entire CIDR block for this VPC, e.g. 10.1.1.0/24"
    },
    "PublicCIDRBlock": {
      "Description":"The public subnet CIDR block",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "the CIDR block for the public part of this VPC, e.g. 10.1.1.0/26"
    },
    "PrivateCIDRBlock": {
      "Description":"The private subnet CIDR block",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "the CIDR block for the private part of this VPC, e.g. 10.1.1.64/26"
    },
    "DbCIDRBlock": {
      "Description":"The db subnet CIDR block",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "the CIDR block for the DB subnet in a separate AZ, e.g. 10.1.1.128/28"
    },
    "PrimaryAZ": {
      "Description":"Primary AZ",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "The AZ for all opsworks EC2 instances"
    },
    "SecondaryAZ": {
      "Description":"Secondary AZ",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "The secondary AZ for future expansion and RDS replication"
    },
    "SNSTopicName": {
      "Description":"The SNS Topic for this stack, used to trigger cloudwatch alarms for NAT instance",
      "Type": "String",
      "Default": "",
      "ConstraintDescription": "this is auto created by oc-opsworks."
    }
  },

  "Mappings" : {
    "AWSNATAMI" : {
      "us-east-1"      : { "AMI" : "ami-4c9e4b24" },
      "us-west-1"      : { "AMI" : "ami-2b2b296e" },
      "us-west-2"      : { "AMI" : "ami-bb69128b" }
    }
  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "CIDRBlock"},
        "EnableDnsHostnames" : "true",
        "Tags" : [
          { "Key" : "Name", "Value" : { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "PublicSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone": { "Ref": "PrimaryAZ" },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "PublicCIDRBlock" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "Public subnet" ] ] } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "GatewayToInternet" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "PublicNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },

    "InboundEmphemeralPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0"
      }
    },

    "OutboundPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "PublicSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },

    "DbSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone": { "Ref": "SecondaryAZ" },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "DbCIDRBlock" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "db subnet" ] ] } }
        ]
      }
    },

    "DBSubnetGroup": {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "db subnet group" ] ] },
        "SubnetIds": [{ "Ref" : "DbSubnet" }, { "Ref" : "PrivateSubnet" }, { "Ref": "PublicSubnet" } ]
      }
    },

    "PrivateSubnet" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone": { "Ref": "PrimaryAZ" },
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : { "Ref" : "PrivateCIDRBlock" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "private subnet" ] ] } }
        ]
      }
    },

    "PrivateRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Network", "Value" : "Private" }
        ]
      }
    },

    "PrivateSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "RouteTableId" : { "Ref" : "PrivateRouteTable" }
      }
    },

    "PrivateRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "InstanceId" : { "Ref" : "NATDevice" }
      }
    },

    "PrivateNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Network", "Value" : "Private" },
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "private subnet network acl" ] ] } }
        ]
      }
    },

    "InboundPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "OutBoundPrivateNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "-1",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "PrivateSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PrivateSubnet" },
        "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
      }
    },

    "NATDevice" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : "t2.medium",
        "SourceDestCheck" : "false",
        "ImageId" : { "Fn::FindInMap" : [ "AWSNATAMI", { "Ref" : "AWS::Region" }, "AMI" ]},
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "GroupSet": [ { "Ref" : "NATSecurityGroup" } ],
            "SubnetId" : { "Ref" : "PublicSubnet" }
          }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "NAT instance" ] ] } }
        ]
      }
    },

    "NATDeviceAlarmTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName" : { "Ref" : "SNSTopicName"}
      }
    },

    "NATDeviceStatusCheckAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": true,
        "AlarmActions" : [ { "Ref": "NATDeviceAlarmTopic" } ],
        "AlarmDescription" : { "Fn::Join" : [" ", [ { "Ref": "AWS::StackName" }, " NAT instance status check"  ] ] },
        "AlarmName" : { "Fn::Join" : ["-", [ { "Ref": "AWS::StackName" }, "NATInstanceStatusCheck"  ] ] },
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "Dimensions" : [
          {
            "Name": "InstanceId",
            "Value": { "Ref": "NATDevice" }
          }
        ],
        "EvaluationPeriods" : 2,
        "MetricName" : "StatusCheckFailed",
        "Namespace" : "AWS/EC2",
        "OKActions" : [ { "Ref": "NATDeviceAlarmTopic" } ],
        "Period" : 60,
        "Statistic" : "Maximum",
        "Threshold" : 1,
        "Unit" : "Count"
      }
    },

    "NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable internal access to the NAT device",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "SourceSecurityGroupId" : { "Ref" : "OpsWorksSecurityGroup" }} ,
          { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "SourceSecurityGroupId" : { "Ref" : "OpsWorksSecurityGroup" }} ,
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "SourceSecurityGroupId" : { "Ref" : "OpsWorksSecurityGroup" } },
          { "IpProtocol" : "tcp", "FromPort" : "514", "ToPort" : "514", "SourceSecurityGroupId" : { "Ref" : "OpsWorksSecurityGroup" } },
          { "IpProtocol" : "tcp", "FromPort" : "6514", "ToPort" : "6514", "SourceSecurityGroupId" : { "Ref" : "OpsWorksSecurityGroup" } },
          { "IpProtocol" : "tcp", "FromPort" : "8081",  "ToPort" : "8081",  "SourceSecurityGroupId" : { "Ref" : "OpsWorksSecurityGroup" }},
          { "IpProtocol" : "tcp", "FromPort" : "9418",  "ToPort" : "9418",  "SourceSecurityGroupId" : { "Ref" : "OpsWorksSecurityGroup" }},
          { "IpProtocol" : "tcp", "FromPort" : "11371",  "ToPort" : "11371",  "SourceSecurityGroupId" : { "Ref" : "OpsWorksSecurityGroup" }}
        ],
        "SecurityGroupEgress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : "0.0.0.0/0" } ,
          { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" } ,
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "514", "ToPort" : "514", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "6514", "ToPort" : "6514", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "8081",  "ToPort" : "8081",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "9418",  "ToPort" : "9418",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "11371",  "ToPort" : "11371",  "CidrIp" : "0.0.0.0/0" }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "security group" ] ] } }
        ]
      }
    },

    "OpsWorksSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow the OpsWorks instances to access the NAT device",
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "opsworks nat security group" ] ] } }
        ]
      }
    },
    "DirectAccessToOpencastDaemon" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable direct access to the opencast java daemon for opencast nodes",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "8080",  "ToPort" : "8080",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "3128",  "ToPort" : "3128",  "CidrIp" : "10.0.0.0/8" },
          { "IpProtocol" : "tcp", "FromPort" : "3128",  "ToPort" : "3128",  "CidrIp" : "172.16.0.0/12" },
          { "IpProtocol" : "tcp", "FromPort" : "3128",  "ToPort" : "3128",  "CidrIp" : "192.168.0.0/16" }
        ],
        "SecurityGroupEgress" : [
          { "IpProtocol" : "tcp", "FromPort" : "8080",  "ToPort" : "8080",  "CidrIp" : "0.0.0.0/0" }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ " ", [ { "Ref" : "AWS::StackName" }, "opencast direct security group" ] ] } }
        ]
      }
    }
  },

  "Outputs" : {

    "VPC" : {
      "Description" : "VPC",
      "Value" : {"Ref" : "VPC"}
    },

    "PublicSubnets" : {
      "Description" : "Public Subnet",
      "Value" : {"Ref" : "PublicSubnet" }
    },

    "PrivateSubnets" : {
      "Description" : "Private Subnet",
      "Value" : {"Ref" : "PrivateSubnet" }
    }
  }
}
